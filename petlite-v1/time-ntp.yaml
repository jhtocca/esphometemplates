time:
  - platform: sntp
    id: sntp_time
    timezone: America/Mexico_City
    servers:
      - 0.pool.ntp.org
      - 1.pool.ntp.org
      - 2.pool.ntp.org
    on_time:
      - seconds: /5
        then:
        - if:
            condition:
              time.has_time:
            then:
              - logger.log:
                  format: "Time has been set and is valid!"
                  level: INFO
              - script.execute: time_loop

text_sensor:
  - platform: template
    name: "Current Time"
    entity_category: "diagnostic"
    icon: "mdi:clock-time-eight"
    lambda: |-
      return id(sntp_time).now().strftime("%A, %B %d %Y %I:%M %p");



script:
  id: time_loop
  mode: single
  then:
    - logger.log:
        format: "Script is being called"
        level: INFO
    - lambda: |-

        auto copy_color_values = [](LightColorValues* source, LightColorValues* target) {
          target->set_state(source->get_state());
          target->set_brightness(source->get_brightness());
          target->set_color_brightness(source->get_color_brightness());
          target->set_red(source->get_red());
          target->set_green(source->get_green());
          target->set_blue(source->get_blue());
          target->set_white(source->get_white());
          target->set_color_temperature(source->get_color_temperature());
          target->set_cold_white(source->get_cold_white());
          target->set_warm_white(source->get_warm_white());
        };

        LightState* ls_sleep = id(sleep_light);
        LightState* ls_output = id(light_strip);

        LightColorValues* cv_current_sleep = &(ls_sleep->remote_values);
        LightColorValues* cv_last_sleep = id(sleep_last_color);

        //ESP_LOGI("main", "Current r: %f", sleep_color_current.get_red());

        if (!id(sleep_last_color)) {
          id(sleep_last_color) = new LightColorValues(
            esphome::light::ColorMode::RGB,
            cv_current_sleep->get_state(),
            cv_current_sleep->get_brightness(),
            cv_current_sleep->get_color_brightness(),
            cv_current_sleep->get_red(),
            cv_current_sleep->get_green(),
            cv_current_sleep->get_blue(),
            cv_current_sleep->get_white(),
            cv_current_sleep->get_color_temperature(),
            cv_current_sleep->get_cold_white(),
            cv_current_sleep->get_warm_white());

          cv_last_sleep = id(sleep_last_color);
        }
        else {
          if (*cv_current_sleep != *cv_last_sleep) {
            ESP_LOGI("main", "CHANGE DETECTED");
            cv_last_sleep->set_state(cv_current_sleep->get_state());
            cv_last_sleep->set_brightness(cv_current_sleep->get_brightness());
            cv_last_sleep->set_color_brightness(cv_current_sleep->get_color_brightness());
            cv_last_sleep->set_red(cv_current_sleep->get_red());
            cv_last_sleep->set_green(cv_current_sleep->get_green());
            cv_last_sleep->set_blue(cv_current_sleep->get_blue());
            cv_last_sleep->set_white(cv_current_sleep->get_white());
            cv_last_sleep->set_color_temperature(cv_current_sleep->get_color_temperature());
            cv_last_sleep->set_cold_white(cv_current_sleep->get_cold_white());
            cv_last_sleep->set_warm_white(cv_current_sleep->get_warm_white());
          }
        }

        ESP_LOGI("main", "Current r: %f g: %f b: %f h: %f s: %f",
          cv_current_sleep->get_red(),
          cv_current_sleep->get_green(),
          cv_current_sleep->get_blue(),
          cv_current_sleep->get_brightness(),
          cv_current_sleep->get_state());

        ESP_LOGI("main", "Saved r: %f g: %f b: %f h: %f s: %f",
          cv_last_sleep->get_red(),
          cv_last_sleep->get_green(),
          cv_last_sleep->get_blue(),
          cv_last_sleep->get_brightness(),
          cv_last_sleep->get_state());

        //if (*sleep_color_current != *sleep_color_last) {
        //  output_light->make_call().from_light_color_values(sleep_color_current).perform();
        //  id(sleep_last_color) = *sleep_color_current;
        //}

