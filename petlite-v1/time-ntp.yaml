time:
  - platform: sntp
    id: sntp_time
    timezone: America/Mexico_City
    servers:
      - 0.pool.ntp.org
      - 1.pool.ntp.org
      - 2.pool.ntp.org

text_sensor:
  - platform: template
    name: "Current Time"
    entity_category: "diagnostic"
    icon: "mdi:clock-time-eight"
    lambda: |-
      return id(sntp_time).now().strftime("%A, %B %d %Y %I:%M %p");

interval:
  - interval: 5s
    then:
      - logger.log:
          format: "Time triggered!"
          level: INFO
      - script.execute: time_loop

script:
  id: time_loop
  mode: single
  then:
    - logger.log:
        format: "Script is being called"
        level: INFO
    - lambda: |-

        // Copies color values from source to target
        auto copy_color_values = [](LightColorValues* source, LightColorValues* target) {
          target->set_color_mode(source->get_color_mode());
          target->set_state(source->get_state());
          target->set_brightness(source->get_brightness());
          target->set_color_brightness(source->get_color_brightness());
          target->set_red(source->get_red());
          target->set_green(source->get_green());
          target->set_blue(source->get_blue());
          target->set_white(source->get_white());
          target->set_color_temperature(source->get_color_temperature());
          target->set_cold_white(source->get_cold_white());
          target->set_warm_white(source->get_warm_white());
        };

        // Applies color values to the output LED light strip
        auto apply_color = [](LightColorValues* source) {
          LightState* ls_output = id(light_strip);
          ls_output->make_call()
            .from_light_color_values(*source)
            .perform();
        };

        // Logs color values of the given source
        auto log_color = [](const char* name, LightColorValues* source) {
          ESP_LOGI("lights", "%s R=%f, G=%f, B=%f, H=%f, S=%f",
            name,
            source->get_red(),
            source->get_green(),
            source->get_blue(),
            source->get_brightness(),
            source->get_state());
        };

        LightState* ls_sleep = id(sleep_light);
        LightState* ls_wake = id(wake_light);
        
        LightColorValues* cv_current_sleep = &(ls_sleep->remote_values);
        LightColorValues* cv_current_wake = &(ls_wake->remote_values);

        LightColorValues* cv_last_sleep = id(sleep_last_color);
        LightColorValues* cv_last_wake = id(wake_last_color);

        // Initialize and demo the sleep light
        if (!id(sleep_last_color)) {
          id(sleep_last_color) = new LightColorValues();
          cv_last_sleep = id(sleep_last_color);
          copy_color_values(cv_current_sleep, cv_last_sleep);
        }
        else {
          if (*cv_current_sleep != *cv_last_sleep) {
            ESP_LOGI("lights", "Sleep light change detected. Will demo.");
            log_color("current_sleep", cv_current_sleep);
            log_color("last_sleep", cv_last_sleep);

            copy_color_values(cv_current_sleep, cv_last_sleep);
            apply_color(cv_last_sleep);
            return;
          }
        }

        int hours = 0;
        int start_hour = id(sleep_start).state_as_esptime().hour;
        int start_minute = id(sleep_start).state_as_esptime().minute;
        
        int end_hour = id(sleep_end).state_as_esptime().hour;
        int end_minute = id(sleep_end).state_as_esptime().minute;

        int total_hours = 0;
        if (start_hour > end_hour) {
          total_hours = (24 - start_hour) + end_hour;
        } else {
          total_hours = end_hour - start_hour;
        }

        int total_minutes = 0;
        if (start_minute > end_minute) {
          total_minutes = (60 - start_minute) + end_minute;
          total_hours--;
          if (total_hours < 0) total_hours = 23;
        } else {
          total_minutes = end_minute - start_minute;
        }

        ESP_LOGI("sched", "%i:%i -> %i:%i Total %i:%i",
          start_hour, start_minute, end_hour, end_minute, total_hours, total_minutes);
